{"version":3,"sources":["components/input-field.js","components/list.js","components/App.js","serviceWorker.js","index.js"],"names":["InputField","props","state","value","onChange","bind","onSubmit","changeFilter","e","this","setState","target","preventDefault","onAdd","changeFilterState","type","className","name","Component","Lists","items","onDelete","onDone","finalList","map","list","id","clazz","done","key","onClick","App","todos","JSON","parse","localStorage","getItem","filter","addItem","deleteItem","doneItem","filterItems","setItem","stringify","length","max","newObj","allItems","index","findIndex","item","before","slice","after","newArr","old","newitem","selectValue","visible","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.252a498b.chunk.js","sourcesContent":["import React,{Component} from \"react\";\n\n\nexport default class InputField extends Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            value: \"\",  \n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.changeFilter = this.changeFilter.bind(this);\n       \n\n    }\n\n\n\n        onChange(e){\n            this.setState({\n                value: e.target.value,\n            })\n        }\n\n        onSubmit(e){\n            e.preventDefault();\n            this.props.onAdd(this.state.value);\n            this.state.value = \"\";\n        }   \n\n        \n        changeFilter(e){\n            let target = e.target.value;\n            this.props.changeFilterState(target);\n\n        }\n       \n    \n\n    render(){\n\n        return(\n        <form onSubmit = {this.onSubmit} >\n             <input onChange = {this.onChange} value = {this.state.value} type=\"text\" className=\"todo-input\" />\n            <button className=\"todo-button\" type=\"submit\">\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            <div className=\"select\">\n                <select onChange={this.changeFilter}  name=\"todos\" className=\"filter-todo\">\n                    <option value=\"all\">All</option>\n                    <option value=\"completed\">Completed</option>\n                    <option value=\"uncompleted\">Uncompleted</option>\n                </select>\n            </div>\n        </form>\n        )\n    }\n}","import React, {Component} from 'react';\n\n\nexport default class Lists extends Component{\n\n\n    render(){\n        let {items, onDelete, onDone} = this.props;\n      \n\n        let finalList = items.map(({list, id, done}) =>{\n            let clazz = done ?  \"todo completed\" : \"todo\";\n            return (\n                <div key={id} className={clazz}>\n                    <li  className=\"todo-item\">{list}</li>\n                    <button onClick = {()=> onDone(id)} className=\"complete-btn\">\n                        <i className=\"fas fa-check\"></i>\n                    </button>\n                    <button onClick={() => onDelete(id)} className=\"trash-btn\">\n                        <i className=\"fas fa-trash\"></i>\n                    </button>\n                </div>\n            )\n        })\n\n       \n        return(\n            <div className=\"todo-container\">\n                <ul className=\"todo-list\">\n                    {finalList}\n                </ul>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport '../App.css';\nimport InputField from \"./input-field\";\nimport Lists from \"./list\";\n\n\nexport default class App extends Component{\n\n    constructor(props){\n      super(props);\n      this.state = {\n        todos: JSON.parse(localStorage.getItem(\"l\")) || [],\n        filter: \"all\",\n      }\n      \n      this.addItem = this.addItem.bind(this);\n      this.deleteItem = this.deleteItem.bind(this);\n      this.doneItem = this.doneItem.bind(this);\n      this.filterItems = this.filterItems.bind(this);\n      this.changeFilterState = this.changeFilterState.bind(this);\n\n      \n\n      \n      \n\n      if(JSON.parse(localStorage.getItem('l')) == null){\n        localStorage.setItem(\"l\", JSON.stringify([]))\n      }\n\n      if(JSON.parse(localStorage.getItem(\"l\")).length === 0){\n        this.max = 1;\n      } else {\n        this.max = (JSON.parse(localStorage.getItem(\"l\"))[JSON.parse(localStorage.getItem(\"l\")).length-1].id) + 1;\n      }\n    }\n\n\n    addItem(value){\n      const newObj = {\n        list: value,\n        done: false,\n        id: this.max++,\n      }\n      this.setState(({todos}) =>{\n          const allItems = [...todos, newObj];\n          localStorage.setItem(\"l\", JSON.stringify(allItems));\n\n          return{\n            todos: allItems,      \n          }\n      })\n    }\n\n\n\n    deleteItem(id){\n      this.setState(({todos}) =>{\n        const index = todos.findIndex((item) => item.id === id);\n        const before = todos.slice(0, index);\n        const after = todos.slice(index+1)\n        let newArr = [...before, ...after];\n        localStorage.setItem(\"l\", JSON.stringify(newArr));\n\n        \n        return{\n          todos: newArr,\n        }\n      });\n    }\n\n\n    doneItem(id){\n      this.setState(({todos}) =>{\n        const index = todos.findIndex((item) => item.id === id);\n        const old = todos[index];\n        const newitem = {...old, done: !old.done};\n\n        const before = todos.slice(0, index);\n        const after = todos.slice(index+1)\n        let newArr = [...before, newitem, ...after];\n        localStorage.setItem(\"l\", JSON.stringify(newArr));\n        \n        return{\n          todos: newArr,\n        }\n      });\n    }\n\n\n    filterItems(selectValue, items){    \n\n        if (selectValue === \"completed\"){\n          return items.filter(item => item.done)\n        } else if (selectValue === \"uncompleted\"){\n          return items.filter(item => !item.done)\n        }else {\n          return items;\n        }\n    }\n\n\n    changeFilterState(target){\n      this.setState({\n        filter: target,\n      })\n    }\n\n\n  render(){\n\n    const {todos, filter} = this.state;\n    const visible = this.filterItems(filter, todos);\n    return(\n      <>\n        <header>\n           <h1>Fika's Todo List</h1>\n        </header>\n        <InputField  onAdd = {this.addItem} changeFilterState = {this.changeFilterState} />\n        <Lists items = {visible} onDelete ={this.deleteItem} onDone = {this.doneItem}/>\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}